	#include<stdio.h>
#include<unistd.h>
	#include<stdlib.h>
	#include<pthread.h>
	#define MAX 1000
	#define MIN 100
	#define SIZE 900
	int a[900],b[900],c[900];
	int  allocate_map()
	{
	        int y=MIN;
	        for(int i=0;i<=900;i++)
	        {
	                a[i]=0;
	                b[i]=y;
	                y++;
	        }
	}
	
	
	
	
	int items[SIZE];
	int front = -1, rear =-1;
	
	int isFull()
	{
	    if( (front == rear + 1) || (front == 0 && rear == SIZE-1)) return 1;
	    return 0;
	}

	
	int isEmpty()
	{
	    if(front == -1) return 1;
	    return 0;
	}
	
	void enQueue(int element)
	{
	    if(isFull()) printf("\n Queue is full!! \n");
	    Else
	    {
	        if(front == -1) front = 0;
	        rear = (rear + 1) % SIZE;
	        items[rear] = element;
	
	    }
	}

	
	
	int deQueue()
	{
	    int element;
	    if(isEmpty()) {
	
	        return(-1);
	    } else {
	        element = items[front];
		        if (front == rear){
	            front = -1;
	            rear = -1;
	        }
	        else {
	            front = (front + 1) % SIZE;
	
	        }
	        return(element);
	    }
	}
	
	int allocate_pid()
	{
	        int i;
	        for(i=0;i<=900;i++)
	        {
	                if(a[i]==0)
	                break;
	        }
	        if(i>900)
	        {
	                printf("cannot assign\n");
	                return 0;
	        }
	        Else
	        {
	                a[i]=1;
	                printf("process id =%d is assigned\n",b[i]);
	
	                return b[i];
	
	        }
	}

	void release_pid(int x)
	{
	        int  y;
	        y=x-100;
	        a[y]=0;
	        printf("process having  id %d  is released\n",b[y]);
	}

	void sleep1()
	{
	        int d=rand()%10;
	        printf("%d\n",d);
	        sleep(d);
	}

	void test()
	{
	
	                int j=0;
	                c[j]=allocate_pid();
	                enQueue(c[j]);
	                int v=deQueue();
	                sleep1();
	                release_pid(v);
	}

	
	main()
	{      
 int i ,in;
	 pthread_t pt[100];
	 allocate_map();
printf(“enter no of threads\n”);
scanf(“%d”,&in);
	for(i=0;i<in;i++)
	        pthread_create(&pt[i],NULL,test,NULL);
	for(i=0;i<in;i++)
	pthread_join(pt[i],NULL);
	}


